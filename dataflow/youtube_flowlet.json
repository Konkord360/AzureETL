{
	"name": "youtube_flowlet",
	"properties": {
		"type": "Flowlet",
		"typeProperties": {
			"sources": [],
			"sinks": [],
			"transformations": [
				{
					"name": "timeAfterPublish"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "Data"
				},
				{
					"name": "Cat"
				},
				{
					"name": "output1"
				}
			],
			"scriptLines": [
				"input(output(",
				"          video_id as string,",
				"          title as string,",
				"          publishedAt as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'',",
				"          channelId as string,",
				"          channelTitle as string,",
				"          categoryId as string,",
				"          trending_date as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'',",
				"          view_count as long,",
				"          likes as long,",
				"          dislikes as long,",
				"          comment_count as long",
				"     ),",
				"     order: 0,",
				"     allowSchemaDrift: true) ~> Data",
				"input(output(",
				"          category_id as string,",
				"          category_title as string",
				"     ),",
				"     order: 1,",
				"     allowSchemaDrift: false) ~> Cat",
				"join1 derive(timeAfterPublish = minus(trending_date,publishedAt) / 86400000 ,",
				"          reactions = likes + dislikes) ~> timeAfterPublish",
				"timeAfterPublish derive(reactionsToViews = (reactions * 100) /view_count,",
				"          likesToDislikes = (likes * 100) / reactions) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(category_title),",
				"     avg_view_count = avg(view_count),",
				"          avg_time_after_publish = avg(timeAfterPublish),",
				"          avg_likes_to_dislikes = avg(likesToDislikes),",
				"          avg_reactions_to_views = avg(reactionsToViews),",
				"          count_vid = count(video_id)) ~> aggregate1",
				"Cat, Data join(category_id == categoryId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"aggregate1 output() ~> output1"
			]
		}
	}
}