{
	"name": "youtube_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "GB",
						"type": "DatasetReference"
					},
					"name": "GBData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "result",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "timeAfterPublish"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     minusValue as long (minus(trending_date,publishedAt))",
				"}",
				"source(output(",
				"          video_id as string,",
				"          title as string,",
				"          publishedAt as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'',",
				"          channelId as string,",
				"          channelTitle as string,",
				"          categoryId as integer,",
				"          trending_date as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'',",
				"          tags as string,",
				"          view_count as long,",
				"          likes as long,",
				"          dislikes as long,",
				"          comment_count as long,",
				"          thumbnail_link as string,",
				"          comments_disabled as string,",
				"          ratings_disabled as string,",
				"          {description\\r} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> GBData",
				"GBData derive(timeAfterPublish = iif($minusValue > 0, $minusValue , 0l),",
				"          reactions = likes + dislikes,",
				"          country = \"GB\") ~> timeAfterPublish",
				"timeAfterPublish derive(reactionsToViews = (reactions * 100) /view_count,",
				"          likesToDislikes = (likes * 100) / reactions) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(categoryId),",
				"     avg_view_count = avg(view_count),",
				"          avg_time_after_publish = avg(timeAfterPublish),",
				"          avg_likes_to_dislikes = avg(likesToDislikes),",
				"          avg_reactions_to_views = avg(reactionsToViews)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          category_title as string,",
				"          avg_view_count as string,",
				"          avg_time_after_publish as string,",
				"          avg_likes_to_dislikes as string,",
				"          avg_reactions_to_views as string,",
				"          count_vid as string,",
				"          country as string",
				"     ),",
				"     partitionFileNames:['result'],",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}